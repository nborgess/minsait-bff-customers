package br.com.plgs.AppClientes.resource;

import com.seuapp.dto.LoginRequest;
import com.seuapp.dto.AuthResponse;
import com.seuapp.dto.ErrorResponse;
import com.seuapp.model.User;
import com.seuapp.service.UserService;
import com.seuapp.security.JwtTokenUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UserService userService;

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
        User user = userService.findByUsername(loginRequest.getUsername());
        if (user != null && new BCryptPasswordEncoder().matches(loginRequest.getPassword(), user.getPassword())) {
            String token = jwtTokenUtil.generateToken(user.getUsername());
            return ResponseEntity.ok(new AuthResponse(token, jwtTokenUtil.getExpiration()));
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body(new ErrorResponse("Credenciais inválidas", "Nome de usuário ou senha incorretos."));
        }
    }

    @GetMapping("/me")
    public ResponseEntity<?> getMe(HttpServletRequest request) {
        String token = jwtTokenUtil.getTokenFromRequest(request);
        if (token != null && jwtTokenUtil.validateToken(token)) {
            Claims claims = jwtTokenUtil.getClaimsFromToken(token);
            User user = userService.findByUsername(claims.getSubject());
            return ResponseEntity.ok(new UserResponse(user.getId(), user.getUsername(), user.getRoles()));
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body(new ErrorResponse("Não autorizado", "Token de autenticação inválido ou expirado."));
        }
    }
}