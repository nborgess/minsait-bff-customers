package br.com.plgs.AppClientes.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.plgs.AppClientes.exception.ClienteException;
import br.com.plgs.AppClientes.exception.ClienteNotFoundException;
import br.com.plgs.AppClientes.model.Customer;
import br.com.plgs.AppClientes.repository.CustomerRepository;
import br.com.plgs.AppClientes.service.interfaces.ClienteServiceInterface;

@Service
public class CustomerService implements ClienteServiceInterface {

	@Autowired
	private CustomerRepository customerRepository;
	
	public Customer save(Customer customer) {
        if (customerRepository.findByEmail(customer.getEmail()).isPresent()) {
            throw new ClienteException("O e-mail fornecido já está em uso.");
        }

        return customerRepository.save(customer);
	}
	
	public Optional<Customer> findById(Long id) {
		Optional<Customer> findCliente = customerRepository.findById(id);
		
		if(!findCliente.isPresent()) {
			throw new ClienteNotFoundException("Não há cliente com o ID fornecido.");
		}
		
		return clienteRepository.findById(id);
	}

	public List<Customer> findAll() {
		return clienteRepository.findAll();
	}

	public Customer update(Customer cliente, Long id) {
		Optional<Customer> findCliente = clienteRepository.findById(id);
		
		if(!findCliente.isPresent()) {
			throw new ClienteNotFoundException("Não há cliente com o ID fornecido.");
		}
		
        Customer updCliente = findCliente.get();
        if (!updCliente.getEmail().equals(cliente.getEmail()) &&
                clienteRepository.findByEmail(cliente.getEmail()).isPresent()) {
            throw new ClienteException("O e-mail fornecido já está em uso.");
        }

        updCliente.setNome(cliente.getNome());
        updCliente.setEmail(cliente.getEmail());
        updCliente.setTelefone(cliente.getTelefone());
        updCliente.setEndereco(cliente.getEndereco());

        return clienteRepository.save(updCliente);
	}

	public void delete(Long id) {
		Optional<Customer> findCliente = clienteRepository.findById(id);
		
	    if (!findCliente.isPresent()) {
	        throw new ClienteNotFoundException("Não há cliente com o ID fornecido.");
	    }		
	    
		clienteRepository.deleteById(id);
		
	}

}
