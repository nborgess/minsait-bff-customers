package br.com.plgs.AppClientes.configuration;

import java.security.Key;
import java.util.Base64;
import java.util.Date;
 
import org.springframework.stereotype.Component;
 
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
 
@Component
public class JwtTokenUtil {

    private String segredo = "umSegredoMuitoLongoQueTemMaisDe256BitsParaSerSeguroComHMACSHA";
    private long validadeM = 3600000; 

    public String createToken(String username) {
        Date agora = new Date();
        Date validade = new Date(agora.getTime() + validadeM);

        byte[] apiKeySecretByte = segredo.getBytes(); 
        Key segredoKey = Keys.hmacShaKeyFor(apiKeySecretByte);

        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(agora)
                .setExpiration(validade)
                .signWith(segredoKey)
                .compact();
    }

    public boolean validateToken(String token) {
        try {
            byte[] apiKeySecretByte = segredo.getBytes(); 
            Key segredoKey = Keys.hmacShaKeyFor(apiKeySecretByte);

            Jwts.parserBuilder()
                .setSigningKey(segredoKey)
                .build()
                .parseClaimsJws(token);

            return true; 

        } catch (Exception e) {
            return false;
        }
    }

    public String getUsernameFromToken(String token) {
        try {
            byte[] apiKeySecretByte = segredo.getBytes();
            Key segredoKey = Keys.hmacShaKeyFor(apiKeySecretByte);

            Claims claims = Jwts.parserBuilder()
                .setSigningKey(segredoKey)
                .build()
                .parseClaimsJws(token)
                .getBody();

            return claims.getSubject();

        } catch (Exception e) {
            return "";
        }
    }

    public long getExpiration() {
        return validadeM / 1000;
    }
}